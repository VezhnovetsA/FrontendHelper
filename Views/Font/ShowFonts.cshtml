@model FrontendHelper.Models.FontIndexViewModel
@using FhEnums
@inject FrontendHelper.Services.AuthService authService

@{
    ViewData["Title"] = "Шрифты";
}

@* 1) Подключаем внешние стили (Google Fonts и т.п.) *@
@foreach (var f in Model.Fonts)
{
    if (!string.IsNullOrEmpty(f.LinkOrLocalUrl) && !f.LinkOrLocalUrl.StartsWith("/fonts/"))
    {
        <link rel="stylesheet" href="@f.LinkOrLocalUrl" />
    }
}

@* 2) Объявляем все локальные файлы под уникальными именами *@
<style>
@foreach (var f in Model.Fonts.Where(x => x.LinkOrLocalUrl?.StartsWith("/fonts/") == true))
{
    <text>
    @@font-face {
        font-family: '@f.FontFamily';
        src: url('@f.LinkOrLocalUrl') format('truetype');
        font-display: swap;
    }
    </text>
}
</style>

<div class="container py-4">
    <h2 class="mb-4">Шрифты</h2>

    @if (authService.HasPermission(Permission.CanManageFonts))
    {
        <div class="mb-4">
            <a asp-action="AddFont"
               asp-controller="Font"
               class="btn-create-icon">
                <i class="bi bi-plus-lg"></i> Добавить шрифт
            </a>
        </div>
    }

    <!-- Поле для предпросмотра -->
    <div class="mb-4">
        <label for="inputText" class="form-label">Введите текст для предпросмотра</label>
        <textarea id="inputText"
                  class="form-control mb-3"
                  rows="3"
                  placeholder="Пример: Привет, мир!">@Model.InputText</textarea>
    </div>

    <!-- Панель фильтров (если есть) -->
    @if (Model.AvailableFilters.Any())
    {
        <div class="filter-bar mb-4">
            @foreach (var filt in Model.AvailableFilters)
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input filter-checkbox"
                           type="checkbox"
                           value="@filt.Value"
                           id="filter-@filt.Value" />
                    <label class="filter-label form-check-label" for="filter-@filt.Value">
                        @filt.Text
                    </label>
                </div>
            }
        </div>
    }

    <!-- Таблица -->
    <div class="card p-3 mb-5">
        <div class="table-responsive">
            <table class="table align-middle mb-0">
                <thead>
                    <tr>
                        <th style="width: 5rem;">Изб.</th>
                        <th>Название шрифта</th>
                        <th>CSS-семейство</th>
                        @if (authService.HasPermission(Permission.CanManageFonts))
                        {
                            <th style="width: 8rem;">Действия</th>
                        }
                    </tr>
                </thead>
                <tbody id="fontList">
                    @foreach (var f in Model.Fonts)
                    {
                        <tr class="font-row"
                            data-filter-ids="@string.Join(',', f.FilterIds)"
                            data-font-family="@f.FontFamily">
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-outline-secondary favorite-toggle-btn"
                                        data-asset-type="Font"
                                        data-asset-id="@f.Id"
                                        style="background:none; border:none;">
                                    @if (f.IsFavorited)
                                    {
                                        <i class="bi bi-heart-fill text-danger" title="Убрать из избранного"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-heart text-secondary" title="Добавить в избранное"></i>
                                    }
                                </button>
                            </td>
                            <td style="font-family: '@f.FontFamily', sans-serif;">
                                @f.Name
                            </td>
                            <td>
                                @f.FontFamily
                            </td>
                            @if (authService.HasPermission(Permission.CanManageFonts))
                            {
                                <td>
                                    <a asp-action="EditFont"
                                       asp-route-id="@f.Id"
                                       class="btn btn-sm btn-outline-secondary me-1"
                                       title="Редактировать">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <form asp-action="Delete"
                                          asp-route-id="@f.Id"
                                          method="post"
                                          class="d-inline"
                                          onsubmit="return confirm('Удалить этот шрифт?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit"
                                                class="btn btn-sm btn-outline-danger"
                                                title="Удалить">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </form>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const input       = document.getElementById('inputText');
            const fontRows    = document.querySelectorAll('.font-row');
            const filterBoxes = document.querySelectorAll('.filter-checkbox');

            // Обновление предпросмотра
            function refreshPreview() {
                const sel = document.querySelector('.font-row.selected');
                if (sel) {
                    const family = sel.dataset.fontFamily;
                    input.style.fontFamily = family + ', sans-serif';
                } else {
                    input.style.fontFamily = '';
                }
            }

            fontRows.forEach(row => {
                row.addEventListener('click', () => {
                    document.querySelectorAll('.font-row.selected')
                            .forEach(r => r.classList.remove('selected'));
                    row.classList.add('selected');
                    refreshPreview();
                });
            });

            // Фильтры
            function applyFilters() {
                const checkedIds = Array.from(filterBoxes)
                    .filter(cb => cb.checked)
                    .map(cb => parseInt(cb.value, 10));

                fontRows.forEach(row => {
                    const rowFilterIds = row.dataset.filterIds
                        ? row.dataset.filterIds.split(',').map(x => parseInt(x, 10))
                        : [];
                    if (!checkedIds.length) {
                        row.style.display = '';
                    } else {
                        const inter = rowFilterIds.filter(i => checkedIds.includes(i));
                        row.style.display = inter.length > 0 ? '' : 'none';
                    }
                });

                const sel = document.querySelector('.font-row.selected');
                if (sel && sel.style.display === 'none') {
                    sel.classList.remove('selected');
                    input.style.fontFamily = '';
                }
            }

            filterBoxes.forEach(cb => cb.addEventListener('change', applyFilters));

            // Toggle «Избранное»
            document.querySelectorAll('.favorite-toggle-btn').forEach(btn => {
                btn.addEventListener('click', async e => {
                    e.stopPropagation();
                    const assetType = btn.dataset.assetType;
                    const assetId   = parseInt(btn.dataset.assetId, 10);
                    const iconEl    = btn.querySelector('i');
                    try {
                        const response = await fetch('/Favorites/Toggle', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ assetType, assetId })
                        });
                        if (!response.ok) throw new Error('Сетевая ошибка');
                        const result = await response.json();

                        if (result.favorited) {
                            iconEl.classList.remove('bi-heart');
                            iconEl.classList.add('bi-heart-fill', 'text-danger');
                            iconEl.title = 'Убрать из избранного';
                        } else {
                            iconEl.classList.remove('bi-heart-fill', 'text-danger');
                            iconEl.classList.add('bi-heart', 'text-secondary');
                            iconEl.title = 'Добавить в избранное';
                        }
                    } catch (err) {
                        alert('Не удалось обновить «Избранное»: ' + err);
                    }
                });
            });
        });
    </script>
}
