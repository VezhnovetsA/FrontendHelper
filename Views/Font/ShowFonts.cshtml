@model FrontendHelper.Models.FontIndexViewModel
@using FhEnums
@inject FrontendHelper.Services.AuthService authService

@{
    ViewData["Title"] = "Шрифты";
}

@section Head {
    <!-- Подключаем внешние шрифты -->
    @foreach (var f in Model.Fonts.Where(x =>
                 !string.IsNullOrEmpty(x.LinkOrLocalUrl) &&
                 !x.LinkOrLocalUrl.StartsWith("/fonts/")))
    {
        <link rel="stylesheet" href="@f.LinkOrLocalUrl" />
    }

    <!-- Объявляем локальные font-face -->
    <style>
    @foreach (var f in Model.Fonts.Where(x =>
                 !string.IsNullOrEmpty(x.LinkOrLocalUrl) &&
                 x.LinkOrLocalUrl.StartsWith("/fonts/")))
    {
        <text>
        @@font-face {
          font-family: '@f.CssFontFamily';
          src: url('@f.LinkOrLocalUrl') format('truetype');
          font-display: swap;
        }
        </text>
    }
    </style>
}

<div class="container py-4">
    <h2 class="mb-4">Шрифты</h2>

    @* ─── Фиксированная верхняя панель: Добавление + предпросмотр текста + фильтры ─── *@
    <div class="sticky-top bg-white pb-3" style="z-index: 10;">
        @* Кнопка “Добавить шрифт” *@
        @if (authService.HasPermission(Permission.CanManageFonts))
        {
            <div class="mb-3">
                <a asp-action="AddFont"
                   asp-controller="Font"
                   class="btn-create-icon">
                    <i class="bi bi-plus-lg"></i> Добавить шрифт
                </a>
            </div>
        }

        @* Поле для предпросмотра *@
        <div class="mb-3">
            <label for="inputText" class="form-label">Введите текст для предпросмотра</label>
            <textarea id="inputText"
                      class="form-control mb-2"
                      rows="3"
                      placeholder="Пример: Привет, мир!">@Model.InputText</textarea>
        </div>

        @* Панель фильтров *@
        @if (Model.AvailableFilters.Any())
        {
            <div class="filter-bar mb-2">
                @foreach (var filt in Model.AvailableFilters)
                {
                    <div class="form-check form-check-inline">
                        <input class="form-check-input filter-checkbox"
                               type="checkbox"
                               value="@filt.Value"
                               id="filter-@filt.Value" />
                        <label class="filter-label form-check-label" for="filter-@filt.Value">
                            @filt.Text
                        </label>
                    </div>
                }
            </div>
        }
    </div>

    @* ─── Основной контент: прокручиваемая таблица ─── *@
    <div class="card mb-5">
        <div class="card-body p-0">
            <div class="font-table-wrapper">
                <table class="table align-middle mb-0">
                    <thead>
                        <tr>
                            <th style="width: 5rem;">Изб.</th>
                            <th>Название шрифта</th>
                            <th>CSS-семейство</th>
                            @if (authService.HasPermission(Permission.CanManageFonts))
                            {
                                <th style="width: 8rem;">Действия</th>
                            }
                        </tr>
                    </thead>
                    <tbody id="fontList">
                        @foreach (var f in Model.Fonts)
                        {
                            <tr class="font-row"
                                data-filter-ids="@string.Join(',', f.FilterIds)"
                                data-font-family="@f.CssFontFamily">
                                <td>
                                    <button type="button"
                                            class="btn btn-sm btn-outline-secondary favorite-toggle-btn"
                                            data-asset-type="Font"
                                            data-asset-id="@f.Id"
                                            style="background:none; border:none;">
                                        @if (f.IsFavorited)
                                        {
                                            <i class="bi bi-heart-fill text-danger" title="Убрать из избранного"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-heart text-secondary" title="Добавить в избранное"></i>
                                        }
                                    </button>
                                </td>
                                <td style="font-family: '@f.CssFontFamily', sans-serif;">
                                    @f.Name
                                </td>
                                <td>
                                    @f.FontFamily
                                </td>
                                @if (authService.HasPermission(Permission.CanManageFonts))
                                {
                                    <td>
                                        <a asp-action="EditFont"
                                           asp-route-id="@f.Id"
                                           class="btn btn-sm btn-outline-primary me-1"
                                           title="Редактировать">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <form asp-action="Delete"
                                              asp-route-id="@f.Id"
                                              method="post"
                                              class="d-inline"
                                              onsubmit="return confirm('Удалить этот шрифт?');">
                                            @Html.AntiForgeryToken()
                                            <button type="submit"
                                                    class="btn btn-sm btn-outline-danger"
                                                    title="Удалить">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const input       = document.getElementById('inputText');
            const fontRows    = document.querySelectorAll('.font-row');
            const filterBoxes = document.querySelectorAll('.filter-checkbox');

            // Обновление предпросмотра выбранного шрифта
            function refreshPreview() {
                const sel = document.querySelector('.font-row.selected');
                if (sel) {
                    input.style.fontFamily = sel.dataset.fontFamily + ', sans-serif';
                } else {
                    input.style.fontFamily = '';
                }
            }

            // Выбор и hover строки
            fontRows.forEach(row => {
                row.addEventListener('click', () => {
                    document.querySelectorAll('.font-row.selected')
                            .forEach(r => r.classList.remove('selected'));
                    row.classList.add('selected');
                    refreshPreview();
                });
                row.addEventListener('mouseenter', () => row.classList.add('hovered'));
                row.addEventListener('mouseleave', () => row.classList.remove('hovered'));
            });

            // Применение фильтров
            function applyFilters() {
                const checkedIds = Array.from(filterBoxes)
                    .filter(cb => cb.checked)
                    .map(cb => parseInt(cb.value, 10));

                fontRows.forEach(row => {
                    const rowFilterIds = row.dataset.filterIds
                        ? row.dataset.filterIds.split(',').map(id => parseInt(id, 10))
                        : [];
                    row.style.display = (
                        !checkedIds.length
                        || rowFilterIds.some(i => checkedIds.includes(i))
                    ) ? '' : 'none';
                });

                const sel = document.querySelector('.font-row.selected');
                if (sel && sel.style.display === 'none') {
                    sel.classList.remove('selected');
                    input.style.fontFamily = '';
                }
            }
            filterBoxes.forEach(cb => cb.addEventListener('change', applyFilters));

            // Toggle “Избранное”
            document.querySelectorAll('.favorite-toggle-btn').forEach(btn => {
                btn.addEventListener('click', async e => {
                    e.stopPropagation();
                    const assetType = btn.dataset.assetType;
                    const assetId   = parseInt(btn.dataset.assetId, 10);
                    const iconEl    = btn.querySelector('i');

                    try {
                        const response = await fetch('/Favorites/Toggle', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ assetType, assetId })
                        });
                        if (!response.ok) throw new Error('Сетевая ошибка');
                        const result = await response.json();

                        if (result.favorited) {
                            iconEl.classList.replace('bi-heart', 'bi-heart-fill');
                            iconEl.classList.add('text-danger');
                            iconEl.title = 'Убрать из избранного';
                        } else {
                            iconEl.classList.replace('bi-heart-fill', 'bi-heart');
                            iconEl.classList.remove('text-danger');
                            iconEl.title = 'Добавить в избранное';
                        }
                    } catch (err) {
                        alert('Не удалось обновить «Избранное»: ' + err);
                    }
                });
            });
        });
    </script>
}
