@model IEnumerable<FrontendHelper.Models.AnimatedElementViewModel>
@using FhEnums
@inject FrontendHelper.Services.AuthService authService

@{
    ViewData["Title"] = "Все анимированные элементы";
}

<h2 class="mb-4">Все анимированные элементы</h2>

<div class="mb-4">
    <a class="btn btn-sm btn-outline-primary btn-view-all"
    asp-action="ShowGroupsOfAnimatedElementsOnTheTopic"
    asp-controller="AnimatedElement">
        ← Группы анимаций
    </a>
</div>

@if (authService.HasPermission(Permission.CanManageAnimatedElements))
{
    <a class="btn-create-icon mb-3"
    asp-controller="AnimatedElement"
    asp-action="CreateAnimatedElement">
        <i class="bi bi-plus-lg"></i> Добавить анимацию
    </a>
}

<div class="row gx-3 gy-4">
    @foreach (var anim in Model)
    {
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="card h-100 shadow-sm position-relative">
                <div style="height: 180px; display:flex; align-items:center; justify-content:center; background:var(--bg-alt); padding:0.5rem;">
                    @{
                        var src = Url.Content($"~/images/animated-elements/{anim.Img}");
                        var ext = System.IO.Path.GetExtension(anim.Img).ToLowerInvariant();
                    }
                    @if (ext == ".gif")
                    {
                        <img src="@src"
                        alt="@anim.Name"
                        class="card-img-top img-fluid"
                        style="object-fit: contain; max-height: 160px; width: 100%;"
                        data-bs-toggle="modal"
                        data-bs-target="#animatedDetailModal"
                        data-animated-element-id="@anim.Id"
                        data-animated-element-name="@anim.Name"
                        data-animated-element-topic="@anim.Topic"
                        data-animated-element-img="@src" />
                    }
                    else
                    {
                        <video class="card-img-top img-fluid"
                        style="object-fit: contain; max-height: 160px; width: 100%;"
                        muted
                        loop
                        autoplay
                        playsinline
                        data-bs-toggle="modal"
                        data-bs-target="#animatedDetailModal"
                        data-animated-element-id="@anim.Id"
                        data-animated-element-name="@anim.Name"
                        data-animated-element-topic="@anim.Topic"
                        data-animated-element-img="@src">
                            <source src="@src" type="video/mp4" />
                        </video>
                    }
                </div>

                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-truncate" title="@anim.Name" style="font-size: 1.1rem;">
                        @anim.Name
                    </h5>
                    <p class="card-text text-muted small mb-2">Тема: @anim.Topic</p>

                    <div class="mt-auto d-flex justify-content-between align-items-center">
                        <button class="btn btn-sm btn-outline-primary"
                        onclick="downloadAnimation('@src')">
                            Скачать
                        </button>
                        <span style="width:0;"></span>
                    </div>
                </div>

                    <button class="favorite-toggle-btn"
                            data-asset-type="AnimatedElement"
                            data-asset-id="@anim.Id"
                            style="position:absolute; top:8px; right:8px; background:none; border:none;">
                        @if (anim.IsFavorited)
                        {
                            <i class="bi bi-heart-fill text-danger" title="Убрать из избранного"></i>
                        }
                        else
                        {
                            <i class="bi bi-heart text-secondary" title="Добавить в избранное"></i>
                        }
                    </button>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="animatedDetailModal" tabindex="-1" aria-labelledby="animatedDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="animatedDetailModalLabel">Детали анимации</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body text-center">
                <div id="modalAnimatedContainer" style="max-height: 300px; margin: 0 auto;"></div>
                <h5 id="modalAnimatedName" class="mb-1"></h5>
                <p id="modalAnimatedTopic" class="text-muted small mb-3"></p>

                <div class="d-flex justify-content-center mb-3">
                    <button id="modalDownloadBtn" class="btn btn-outline-primary me-2">
                        <i class="bi bi-download"></i> Скачать
                    </button>
                        <button id="modalFavBtn" class="btn btn-outline-danger">
                            <i id="modalFavIcon" class="bi"></i> Избранное
                        </button>
                </div>

                @if (authService.HasPermission(Permission.CanManageAnimatedElements))
                {
                    <div class="d-flex justify-content-center">
                        <a id="modalEditBtn" class="btn btn-warning me-2" href="#">
                            <i class="bi bi-pencil"></i> Редактировать
                        </a>
                        <form id="modalDeleteForm"
                              method="post"
                              asp-controller="AnimatedElement"
                              asp-action="DeleteAnimatedElement"
                              onsubmit="return confirm('Вы уверены, что хотите удалить эту анимацию?');">
                            <input type="hidden" id="modalDeleteId" name="id" value="" />
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Удалить
                            </button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function downloadAnimation(url) {
            const link = document.createElement('a');
            link.href = url;
            const fileName = url.substring(url.lastIndexOf('/') + 1);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        document.querySelectorAll('.favorite-toggle-btn').forEach(btn => {
            btn.addEventListener('click', async function () {
                const assetType = this.dataset.assetType;
                const assetId   = parseInt(this.dataset.assetId, 10);
                try {
                    const response = await fetch('/Favorites/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ assetType, assetId })
                    });
                    if (!response.ok) throw new Error('Сетевая ошибка');
                    const result = await response.json();
                    const iconEl = this.querySelector('i');
                    if (result.favorited) {
                        iconEl.classList.remove('bi-heart');
                        iconEl.classList.add('bi-heart-fill', 'text-danger');
                        iconEl.title = 'Убрать из избранного';
                    } else {
                        iconEl.classList.remove('bi-heart-fill', 'text-danger');
                        iconEl.classList.add('bi-heart', 'text-secondary');
                        iconEl.title = 'Добавить в избранное';
                    }
                } catch (err) {
                    alert('Не удалось обновить избранное: ' + err);
                }
            });
        });

        const animatedDetailModal = document.getElementById('animatedDetailModal');
        animatedDetailModal.addEventListener('show.bs.modal', function (event) {
            const triggerEl = event.relatedTarget;
            const animId    = triggerEl.dataset.animatedElementId;
            const name      = triggerEl.dataset.animatedElementName;
            const topic     = triggerEl.dataset.animatedElementTopic;
            const imgUrl    = triggerEl.dataset.animatedElementImg;

            const cardIcon = document.querySelector(`.favorite-toggle-btn[data-asset-id="${animId}"] i`);
            const isFavCard = cardIcon && cardIcon.classList.contains('bi-heart-fill');

            document.getElementById('modalAnimatedName').innerText  = name;
            document.getElementById('modalAnimatedTopic').innerText = 'Тема: ' + topic;

            const container = document.getElementById('modalAnimatedContainer');
            container.innerHTML = '';
            const ext = imgUrl.split('.').pop().toLowerCase();
            if (ext === 'gif') {
                const img = document.createElement('img');
                img.src = imgUrl;
                img.alt = name;
                img.className = 'img-fluid mb-3';
                img.style.maxHeight = '300px';
                img.style.margin = '0 auto';
                img.style.display = 'block';
                container.appendChild(img);
            } else {
                const video = document.createElement('video');
                video.className = 'img-fluid mb-3';
                video.style.maxHeight = '300px';
                video.style.margin = '0 auto';
                video.style.display = 'block';
                video.controls = true;
                video.muted = true;
                video.loop = true;
                video.autoplay = true;
                video.playsInline = true;
                const source = document.createElement('source');
                source.src = imgUrl;
                source.type = 'video/mp4';
                video.appendChild(source);
                container.appendChild(video);
            }

            const downloadBtn = document.getElementById('modalDownloadBtn');
            downloadBtn.onclick = () => downloadAnimation(imgUrl);

            const favIcon = document.getElementById('modalFavIcon');
            const favBtn  = document.getElementById('modalFavBtn');
            if (isFavCard) {
                favIcon.className = 'bi bi-heart-fill text-danger';
                favBtn.title      = 'Убрать из избранного';
            } else {
                favIcon.className = 'bi bi-heart text-secondary';
                favBtn.title      = 'Добавить в избранное';
            }

            favBtn.onclick = async () => {
                try {
                    const response = await fetch('/Favorites/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ assetType: 'AnimatedElement', assetId: parseInt(animId, 10) })
                    });
                    if (!response.ok) throw new Error('Сетевая ошибка');
                    const result = await response.json();

                    if (result.favorited) {
                        favIcon.className = 'bi bi-heart-fill text-danger';
                        favBtn.title      = 'Убрать из избранного';
                    } else {
                        favIcon.className = 'bi bi-heart text-secondary';
                        favBtn.title      = 'Добавить в избранное';
                    }

                    const cardBtnIcon = document.querySelector(`.favorite-toggle-btn[data-asset-id="${animId}"] i`);
                    if (cardBtnIcon) {
                        if (result.favorited) {
                            cardBtnIcon.classList.remove('bi-heart');
                            cardBtnIcon.classList.add('bi-heart-fill', 'text-danger');
                            cardBtnIcon.title = 'Убрать из избранного';
                        } else {
                            cardBtnIcon.classList.remove('bi-heart-fill', 'text-danger');
                            cardBtnIcon.classList.add('bi-heart', 'text-secondary');
                            cardBtnIcon.title = 'Добавить в избранное';
                        }
                    }
                } catch (err) {
                    alert('Не удалось обновить избранное: ' + err);
                }
            };

        @if (authService.HasPermission(Permission.CanManageAnimatedElements))
        {
            <text>
                        const editBtn    = document.getElementById('modalEditBtn');
                        const deleteForm = document.getElementById('modalDeleteForm');
                        const deleteId   = document.getElementById('modalDeleteId');

                        editBtn.href      = '@Url.Action("EditAnimatedElement", "AnimatedElement")/' + animId;
                        deleteForm.action = '@Url.Action("DeleteAnimatedElement", "AnimatedElement")';
                        deleteId.value    = animId;
            </text>
        }
        });
    </script>
}
