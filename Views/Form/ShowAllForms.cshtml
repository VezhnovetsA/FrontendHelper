@model IEnumerable<FrontendHelper.Models.FormViewModel>
@using FhEnums
@inject FrontendHelper.Services.AuthService authService

@{
    ViewData["Title"] = "Все формы";
}

<h2 class="mb-4">Все формы</h2>

<div class="mb-4">
    <a class="btn btn-sm btn-outline-primary btn-view-all"
       asp-action="ShowGroupsOfForms"
       asp-controller="Form">
        ← Группы форм
    </a>
</div>

@if (authService.HasPermission(Permission.CanManageForms))
{
    <a class="btn-create-icon mb-3"
       asp-controller="Form"
       asp-action="CreateForm">
        <i class="bi bi-plus-lg"></i> Добавить форму
    </a>
}

<div class="row gx-3 gy-4">
    @foreach (var form in Model)
    {
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="card h-100 shadow-sm position-relative"
                 style="cursor:pointer; height:600px;"
                 data-form-id="@form.Id"
                 data-form-name="@form.Name"
                 data-form-topic="@form.Topic"
                 data-form-file="@form.FormCode">
                <div style="
                        height:300px;
                        overflow-y:auto;
                        display:flex;
                        align-items:flex-start;
                        justify-content:flex-start;
                        background: var(--bg-alt);
                        padding:0.5rem;
                        border-top-left-radius:12px;
                        border-top-right-radius:12px;">
                    <iframe src="@Url.Content($"~/forms/{form.FormCode}")"
                            style="
                                border:none;
                                width:100%;
                                height:1000px; /* фиксированная высота, контейнер скроллится */
                                pointer-events:none;
                                "
                            scrolling="no">
                    </iframe>
                </div>

                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-truncate"
                        title="@form.Name"
                        style="font-size:1.1rem;">
                        @form.Name
                    </h5>
                    <p class="card-text text-muted small mb-2">Категория: @form.Topic</p>

                    <div class="mt-auto d-flex justify-content-between align-items-center">
                        <button class="btn btn-sm btn-outline-primary"
                                onclick="event.stopPropagation(); downloadCode('@Url.Action("DownloadCode","Form", new { id = form.Id })')">
                            Скачать код
                        </button>

                            <button class="favorite-toggle-btn"
                                    data-asset-type="Form"
                                    data-asset-id="@form.Id"
                                    style="background:none; border:none;">
                                @if (form.IsFavorited)
                                {
                                    <i class="bi bi-heart-fill text-danger" title="Убрать из избранного"></i>
                                }
                                else
                                {
                                    <i class="bi bi-heart text-secondary" title="Добавить в избранное"></i>
                                }
                            </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="formDetailModal" tabindex="-1" aria-labelledby="formDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="formDetailModalLabel">Детали формы</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>

            <div class="modal-body text-center">

                <div id="modalFormPreview"
                     class="mb-3"
                     style="
                        width:100%;
                        height:400px;
                        overflow-y:auto;
                        display:flex;
                        align-items:flex-start;
                        justify-content:flex-start;
                        background: var(--bg-alt);
                        padding:0.5rem;
                     ">
                </div>
                <h5 id="modalFormName" class="mb-1"></h5>
                <p id="modalFormTopic" class="text-muted small mb-3"></p>

                <div class="d-flex justify-content-center mb-3">
                    <button id="modalDownloadBtn" class="btn btn-outline-primary me-2">
                        <i class="bi bi-download"></i> Скачать код
                    </button>
                        <button id="modalFavBtn" class="btn btn-outline-danger">
                            <i id="modalFavIcon" class="bi"></i> Избранное
                        </button>
                </div>

                @if (authService.HasPermission(Permission.CanManageForms))
                {
                    <div class="d-flex justify-content-center">
                        <a id="modalEditBtn" class="btn btn-outline-secondary me-2" href="#">
                            <i class="bi bi-pencil"></i> Редактировать
                        </a>
                        <form id="modalDeleteForm" method="post" asp-controller="Form" asp-action="DeleteForm" onsubmit="return confirm('Вы уверены, что хотите удалить эту форму?');" style="display:inline;">
                            <input type="hidden" id="modalDeleteId" name="id" value="" />
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Удалить
                            </button>
                        </form>
                    </div>
                }
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        function downloadCode(url) {
            const link = document.createElement('a');
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function getAntiForgeryToken() {
            const input = document.querySelector('input[name="__RequestVerificationToken"]');
            return input ? input.value : '';
        }

        document.querySelectorAll('.favorite-toggle-btn').forEach(btn => {
            btn.addEventListener('click', async function (e) {
                e.stopPropagation();
                const assetType = this.dataset.assetType;
                const assetId   = parseInt(this.dataset.assetId, 10);
                const iconEl    = this.querySelector('i');

                try {
                    const response = await fetch('/Favorites/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ assetType, assetId })
                    });
                    if (!response.ok) throw new Error('Сетевая ошибка');
                    const result = await response.json();

                    if (result.favorited) {
                        iconEl.classList.remove('bi-heart');
                        iconEl.classList.add('bi-heart-fill', 'text-danger');
                        iconEl.title = 'Убрать из избранного';
                    } else {
                        iconEl.classList.remove('bi-heart-fill', 'text-danger');
                        iconEl.classList.add('bi-heart', 'text-secondary');
                        iconEl.title = 'Добавить в избранное';
                    }
                } catch (err) {
                    alert('Не удалось обновить избранное: ' + err);
                }
            });
        });

        function openFormModal(formId) {
            var triggerEl = document.querySelector(`.card[data-form-id='${formId}']`);
            if (!triggerEl) return;

            var name       = triggerEl.getAttribute('data-form-name');
            var topic      = triggerEl.getAttribute('data-form-topic');
            var codeFile   = triggerEl.getAttribute('data-form-file');
            var previewUrl = "/forms/" + codeFile;

            document.getElementById('modalFormName').innerText  = name;
            document.getElementById('modalFormTopic').innerText = "Категория: " + topic;

            var container = document.getElementById('modalFormPreview');
            container.innerHTML = "";
            var iframe = document.createElement('iframe');
            iframe.src = previewUrl;
            iframe.style.cssText = `
                width: 100%;
                height: 1000px;  /* высота > контейнера, контейнер скроллится */
                border: none;
                pointer-events: none;
            `;
            iframe.setAttribute('scrolling', 'no');
            container.appendChild(iframe);

            document.getElementById('modalDownloadBtn').onclick = () => {
                downloadCode(`@Url.Action("DownloadCode", "Form")/${formId}`);
            };

            var favIcon = document.getElementById('modalFavIcon');
            var favBtn  = document.getElementById('modalFavBtn');
            var cardIcon = document.querySelector(`.favorite-toggle-btn[data-asset-id="${formId}"] i`);
            var isFavCard = cardIcon && cardIcon.classList.contains('bi-heart-fill');

            if (isFavCard) {
                favIcon.className = 'bi bi-heart-fill text-danger';
                favBtn.title      = 'Убрать из избранного';
            } else {
                favIcon.className = 'bi bi-heart text-secondary';
                favBtn.title      = 'Добавить в избранное';
            }

            favBtn.onclick = async () => {
                try {
                    const response = await fetch('/Favorites/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ assetType: 'Form', assetId: parseInt(formId, 10) })
                    });
                    if (!response.ok) throw new Error('Ошибка от сервера: ' + response.status);
                    const result = await response.json();

                    if (result.favorited) {
                        favIcon.className = 'bi bi-heart-fill text-danger';
                        favBtn.title      = 'Убрать из избранного';
                    } else {
                        favIcon.className = 'bi bi-heart text-secondary';
                        favBtn.title      = 'Добавить в избранное';
                    }

                    var cardBtnIcon = document.querySelector(`.favorite-toggle-btn[data-asset-id="${formId}"] i`);
                    if (cardBtnIcon) {
                        if (result.favorited) {
                            cardBtnIcon.classList.remove('bi-heart');
                            cardBtnIcon.classList.add('bi-heart-fill', 'text-danger');
                            cardBtnIcon.title = 'Убрать из избранного';
                        } else {
                            cardBtnIcon.classList.remove('bi-heart-fill', 'text-danger');
                            cardBtnIcon.classList.add('bi-heart', 'text-secondary');
                            cardBtnIcon.title = 'Добавить в избранное';
                        }
                    }
                } catch (err) {
                    alert('Не удалось обновить избранное: ' + err);
                }
            };

        @if (authService.HasPermission(Permission.CanManageForms))
        {
            <text>
                        var editBtn       = document.getElementById('modalEditBtn');
                        var deleteForm    = document.getElementById('modalDeleteForm');
                        var deleteIdInput = document.getElementById('modalDeleteId');

                        editBtn.href        = '@Url.Action("EditForm", "Form")/' + formId;
                        deleteIdInput.value = formId;
            </text>
        }

            var modalEl = document.getElementById('formDetailModal');
            var bsModal = new bootstrap.Modal(modalEl);
            bsModal.show();
        }

        document.querySelectorAll('.card[data-form-id]').forEach(card => {
            card.addEventListener('click', function(e) {
                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'I') return;
                var id = this.getAttribute('data-form-id');
                openFormModal(id);
            });
        });
    </script>
}
